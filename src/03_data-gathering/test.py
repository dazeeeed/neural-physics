import numpy as np
import os
import matplotlib.pyplot as plt
from utils import index_to_days_interpolation
import matplotlib.axes._axes as axes

cycle = [
    1.0833709999999999, 1.083217, 1.081923, 1.081508, 1.0792899999999999,
    1.076254, 1.073074, 1.069672, 1.065999, 1.064073,                 # 10
    1.06205, 1.059941, 1.057731, 1.055428, 1.053042,
    1.050561, 1.047999, 1.045375, 1.042678, 1.0399120000000002,       # 20
    1.037092, 1.034219, 1.031311, 1.028355, 1.025359,
    1.022337, 1.019288, 1.016211, 1.013112, 1.009996,                 # 30
    1.0068629999999998, 1.0037209999999999, 1.000561, 0.997397, 0.9942270000000001,
    0.99105, 0.98787, 0.98469, 0.981513, 0.9783370000000001,          # 40
    0.9751709999999999, 0.97359, 0.9720059999999999, 0.9704219999999999, 0.9688379999999999,
    0.967255, 0.965674, 0.964096, 0.962518, 0.96094, 0.959361, 0.95778, 0.9562, 0.9546190000000001, 0.95304, 0.951462, 0.9498850000000001, 0.94831, 0.946735, 0.94516, 0.943586, 0.942011, 0.9404370000000001, 0.9388639999999999, 0.937291, 0.9357190000000001, 0.934148, 0.932578, 0.931009]

index_to_days_map = {0: 0.0,
            1: 1.0,
            2: 21.0,
            3: 41.0,
            4: 61.0,
            5: 81.0,
            6: 101.0,
            7: 121.0,
            8: 141.0,
            9: 151.0,
            10: 161.0,
            11: 171.0,
            12: 181.0,
            13: 191.0,
            14: 201.0,
            15: 211.0,
            16: 221.0,
            17: 231.0,
            18: 241.0,
            19: 251.0,
            20: 261.0,
            21: 271.0,
            22: 281.0,
            23: 291.0,
            24: 301.0,
            25: 311.0,
            26: 321.0,
            27: 331.0,
            28: 341.0,
            29: 351.0,
            30: 361.0,
            31: 371.0,
            32: 381.0,
            33: 391.0,
            34: 401.0,
            35: 411.0,
            36: 421.0,
            37: 431.0,
            38: 441.0,
            39: 451.0,
            40: 461.0,
            41: 466.0,
            42: 471.0,
            43: 476.0,
            44: 481.0,
            45: 486.0,
            46: 491.0,
            47: 496.0,
            48: 501.0,
            49: 506.0,
            50: 511.0,
            51: 516.0,
            52: 521.0,
            53: 526.0,
            54: 531.0,
            55: 536.0,
            56: 541.0,
            57: 546.0,
            58: 551.0,
            59: 556.0,
            60: 561.0,
            61: 566.0,
            62: 571.0,
            63: 576.0,
            64: 581.0,
            65: 586.0,
            66: 591.0,
            67: 596.0,
            68: 601.0}

def index_to_days_interpolation(x):
    if x < 1:
        return 0
    elif 1 <= x < 9:
        return 1 + 20 * (x - 1)
    elif 9 <= x < 40:
        return 151 + 10 * (x - 9)
    else:
        return 461.0 + 5 * (x - 40)

a = index_to_days_interpolation(35.0474033816425)
print(a)
# y = [index_to_days_interpolation(x) for x in np.arange(0, 70, 1)]

# plt.plot(np.arange(0, 70, 1), y)

font = {'size': 15}

plt.rc('font', **font)

fig, ax = plt.subplots()
ax.scatter(index_to_days_map.keys(), index_to_days_map.values(), marker='+')
ax.set_ylabel("Days")
ax.set_xlabel("Index")

fig.tight_layout()
plt.savefig('index_to_days.svg')

def get_cycle_length():
    # cycle = np.array([
    #     1.013112, 1.009996, 1.0068629999999998,
    #     1.0037209999999999, 1.000561, 0.997397,
    #     0.9942270000000001, 0.99105, 0.98787
    # ])

    sorted_arr = np.sort(cycle[2:])

    cycle_length = 67 - np.searchsorted(sorted_arr, 1) + 2 - 1

    # print(cycle_length)
    # print(cycle)
    # print(cycle[cycle_length], cycle[cycle_length+1])

    if(cycle_length <= len(sorted_arr)-1):
        x = cycle_length - 1.0 / (cycle[cycle_length] - cycle[cycle_length+1]) * (1-cycle[cycle_length])
        # print(x)


def load_npy():
    with open(os.path.join('..', '..', 'data', 'numpy-arrays', 'keff.npy'), 'rb') as f:
        a = np.load(f)
    print(a)


get_cycle_length()
